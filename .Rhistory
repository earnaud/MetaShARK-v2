rv$attributes
)[names(rv$CU_Table)]
rv$CU_Table
rv$attributes
printReactiveValues(
rv$attributes
)
reactiveValuesToList(rv$attributes)
isTruthy(reactiveValuesToList(rv$attributes))
isTruthy(unlist(reactiveValuesToList(rv$attributes)))
golem::document_and_reload(); runMetashark(dev=TRUE)
golem::document_and_reload(); runMetashark(dev=TRUE)
paste(savevar$emlal$selectDP$dp_path,
savevar$emlal$selectDP$dp_name,
"metadata_templates",
sep = "/")
dir(paste(savevar$emlal$selectDP$dp_path,
savevar$emlal$selectDP$dp_name,
"metadata_templates",
sep = "/"))
rv$complete
rm(i)
golem::document_and_reload(); runMetashark(dev=TRUE)
golem::document_and_reload(); runMetashark(dev=TRUE)
template_categorical_variables(
path = paste(savevar$emlal$selectDP$dp_path,
savevar$emlal$selectDP$dp_name,
"metadata_templates",
sep = "/"),
data.path = paste(savevar$emlal$selectDP$dp_path,
savevar$emlal$selectDP$dp_name,
"data_objects",
sep = "/")
)
View(fread("~/dataPackagesOutput/emlAssemblyLine/leiden_emldp/leiden/metadata_templates/attributes_decomp.txt"))
View(fread("~/dataPackagesOutput/emlAssemblyLine/leiden_emldp/leiden/metadata_templates/attributes_decomp.txt"))
View(fread("~/dataPackagesOutput/emlAssemblyLine/leiden_emldp/leiden/metadata_templates/attributes_nitrogen.txt"))
View(fread("~/dataPackagesOutput/emlAssemblyLine/leiden_emldp/leiden/data_objects/Genes.xlsx"))
file.remove("~/dataPackagesOutput/emlAssemblyLine/leiden_emldp/leiden/data_objects/Genes.xlsx")
file.remove("~/dataPackagesOutput/emlAssemblyLine/leiden_emldp/leiden/data_objects/Physico.xlsx")
template_categorical_variables(
path = paste(savevar$emlal$selectDP$dp_path,
savevar$emlal$selectDP$dp_name,
"metadata_templates",
sep = "/"),
data.path = paste(savevar$emlal$selectDP$dp_path,
savevar$emlal$selectDP$dp_name,
"data_objects",
sep = "/")
)
?template_categorical_variables
golem::document_and_reload(); runMetashark(dev=TRUE)
template_categorical_variables(
path = paste(savevar$emlal$selectDP$dp_path,
savevar$emlal$selectDP$dp_name,
"metadata_templates",
sep = "/"),
data.path = paste(savevar$emlal$selectDP$dp_path,
savevar$emlal$selectDP$dp_name,
"data_objects",
sep = "/")
)
savevar$emlal$templateDP$decomp.csv
golem::document_and_reload(); runMetashark(dev=TRUE)
rv$attributesTable
savevar$emlal$templateDP$decomp.csv
savevar$emlal$templateDP$nitrogen.csv
View(fread("~/dataPackagesOutput/emlAssemblyLine/leiden_emldp/leiden/metadata_templates/attributes_nitrogen.txt"))
View(fread("~/dataPackagesOutput/emlAssemblyLine/test_emldp/test/metadata_templates/attributes_nitrogen.txt"))
View(fread("~/dataPackagesOutput/emlAssemblyLine/test_emldp/test/metadata_templates/attributes_decomp.txt"))
nextStep
golem::document_and_reload(); runMetashark(dev=TRUE)
test <- fread("~/dataPackagesOutput/occurrence.txt")
test <- fread("~/dataPackagesOutput/occurrence.txt", data.table = FALSE, stringsAsFactors = FALSE)
library("readr")
get.delim
library("reader")
get.delim("~/dataPackagesOutput/occurrence.txt")
EDIutils::detect_delimeter
View(EDIutils::detect_delimeter)
get.delim("~/dataPackagesOutput/occurrence.txt", 1)
get.delim("~/dataPackagesOutput/occurrence.txt", 1, delims = c("\t", ",", ";", "|")))
get.delim("~/dataPackagesOutput/occurrence.txt", 1, delims = c("\t", ",", ";", "|"))
get.delim("~/dataPackagesOutput/occurrence.txt", 1, delims = c("\t", ",", ";", "|"))
View(EDIutils::detect_delimeter_2)
View(EDIutils::detect_error)
View(EDIutils::detect_errors)
EDIutils::detect_delimeter("~/dataPackagesOutput/","occurence.txt","lin")
View(EDIutils::validate_file_names)
EDIutils::detect_delimeter("~/dataPackagesOutput/","~/dataPackagesOutput/occurence.txt","lin")
EDIutils::detect_delimeter("~/dataPackagesOutput/","occurence.txt","lin")
EDIutils::detect_delimeter("~/dataPackagesOutput/","occurrence.txt","lin")
EDIutils::detect_error("~/dataPackagesOutput/","occurrence.txt","lin")
count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt""))
)
)
A
count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"))
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"))
table(cf)
as.data.frame(table(cf))
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"), blank.lines.skip = TRUE)
as.data.frame(table(cf))
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"))
as.data.frame(table(cf))
which(is.na(test))
test[is.na(test)] <- 0
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"))
as.data.frame(table(cf))
test[1:5,1:5]
test[test == ""] <- 0
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"))
as.data.frame(table(cf))
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"), quote = c("\"","\'"))
as.data.frame(table(cf))
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"), quote = c("\"","\'","`"))
as.data.frame(table(cf))
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"), quote = c("\"","\'","\`"))
as.data.frame(table(cf))
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"), quote = c("\"","\'",""))
as.data.frame(table(cf))
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"), quote = c("\"","\'","@"))
as.data.frame(table(cf))
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"), quote = c("\"","\'","["))
as.data.frame(table(cf))
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"), quote = c("\"","\'","^"))
as.data.frame(table(cf))
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"), quote = c("\"","\'","~"))
as.data.frame(table(cf))
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"), quote = c("\"","\'","_"))
as.data.frame(table(cf))
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"), quote = c("\"","\'","#"))
as.data.frame(table(cf))
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"), quote = c("\"","\'","Â°"))
as.data.frame(table(cf))
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"), quote = c("\"","\'"))
as.data.frame(table(cf))
cf
cf[cf!=237]
which(cf!=237)
test[which(cf!=237),]
sub<- test[which(cf!=237),]
sub[1]
sub[1,]
length(sub[1,])
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"), quote = c("\"","\'",":"))
as.data.frame(table(cf))
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"), quote = c("\"","\'",";"))
as.data.frame(table(cf))
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"), quote = c("\"","\'","-"))
as.data.frame(table(cf))
allchars <- unique(
strsplit(
paste(sub[1,], collapse = ""),
"")
)
allchars
unique(allchars)
table(allchars)
names(table(allchars))
allchars <- names(table(allchars))
table(cf)
which(cf = 1)
which(cf == 1)
which(cf == 107)
cf[520,]
cf[520]
test[520,]
length(test[520,])
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"), quote = c("\"","\'"," "))
as.data.frame(table(cf))
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"), quote = c("\"","\'","."))
as.data.frame(table(cf))
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"), quote = c("\"","\'","("))
as.data.frame(table(cf))
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"), quote = c("\"","\'","()"))
as.data.frame(table(cf))
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"), quote = c("\"","\'","/"))
as.data.frame(table(cf))
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"), quote = c("\"","\'",":"))
as.data.frame(table(cf))
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"), quote = c("\"","\'",";"))
as.data.frame(table(cf))
allchars
cf <- count.fields("~/dataPackagesOutput/occurrence.txt", get.delim("~/dataPackagesOutput/occurrence.txt"), quote = c("\"","\'","&"))
as.data.frame(table(cf))
devtools::load_all()
runMetashark()
runMetashark()
?tagList
strsplit("aaa","")
unlist(strsplit("aaa",""))
devtools::load_all()
runMetashark()
golem::document_and_reload()
golem::document_and_reload()
devtools::load_all()
traceback()
update.packages()
update.packages()
update.packages()
.libPaths()
sapply(.libPaths, dir)
dir(.libPaths[1])
dir(".")
.libPaths[1]
sapply(.libPaths(), dir)
devtools::load_all()
install.packages("V8")
devtools::load_all()
devtools::load_all()
runMetashark()
loadedNamespaces()
sessionInfo()
names(sessionInfo())
sessionInfo()$loadedOnly
names(sessionInfo()$loadedOnly)
fromSI <- names(sessionInfo()$loadedOnly)
fromSI == loadedNamespaces()
fromSI %in% loadedNamespaces()
all(fromSI %in% loadedNamespaces())
rm(fromSI)
loadedNamespaces()
loadedNamespaces()
baseLoad <- loadedNamespaces()
devtools::load_all()
loadedNamespaces()
loadedNamespaces() %in% baseLoad
!loadedNamespaces() %in% baseLoad
loadedNamespaces()[!loadedNamespaces() %in% baseLoad]
data.table(fwrite(loadedNamespaces()[!loadedNamespaces() %in% baseLoad], "~/Desktop/tmp.txt"))
data.table::fwrite(loadedNamespaces()[!loadedNamespaces() %in% baseLoad], "~/Desktop/tmp.txt")
data.table::fwrite(list(loadedNamespaces()[!loadedNamespaces() %in% baseLoad]), "~/Desktop/tmp.txt")
install.packages("miniCRAN")
library(miniCRAN)
pkgDep("EML")
dg <- makeDepGraph("EML")
plot(dg, legendPosition = c(-1,-1))
plot(dg, legendPosition = c(-1,-1), vertex.size = 20)
plot(dg, legendPosition = c(-1,-1), vertex.size = 30)
plot(dg, legendPosition = c(-1,-1), shape = "circle")
plot(dg, legendPosition = c(-1,-1), shape = "square")
plot(dg, legendPosition = c(-1,-1), cex = 1)
plot(dg, legendPosition = c(-1,-1), cex = 0.5)
dep.list <- lapply(loadedNamespaces()[!loadedNamespaces() %in% baseLoad], pkgDep)
rm(list = ls())
baseLoad <- loadedNamespaces()
EMLLoad <- loadedNamespaces()[!loadedNamespaces() %in% baseLoad]
pkgDep(EMLLoad[1])
EEMLLoad[1]
EMLLoad[1]
EMLLoad
loadedNamespaces()[!loadedNamespaces() %in% baseLoad]
baseLoad
rm(list = ls())
baseLoad <- loadedNamespaces()
EMLLoad <- loadedNamespaces()[!loadedNamespaces() %in% baseLoad]
devtools::load_all()
EMLLoad <- loadedNamespaces()[!loadedNamespaces() %in% baseLoad]
pkDep(EMLLoad[1])
pkgDep(EMLLoad[1])
miniCRAN::pkgDep(EMLLoad[1])
dep.list <- lapply(EMLLoad, pkgDep)
dep.list <- lapply(EMLLoad, miniCRAN::pkgDep)
dep.list <- lapply(EMLLoad, function(pkg){
cat(pkg,"\n"),
try(miniCRAN::pkgDep(pkg))
})
dep.list <- lapply(EMLLoad, function(pkg){
cat(pkg,"\n")
try(miniCRAN::pkgDep(pkg))
})
View(dep.list)
names(dep.list) <- EMLLoad
View(dep.list)
sapply(dep.list, length)
table(sapply(dep.list, length))
dep.list$htmlwidgets
dep.list$htmlwidgets %in% baseLoad
sum(dep.list$htmlwidgets %in% baseLoad)
devtools::document()
devtools::document()
?MetaShARK::.app_ui
golem::activate_js
system.file("utils/golem-js.js", package = "golem")
devtools::document()
devtools::document()
devtools::document()
baseLoad
??loaded_packages
?installed.packages
devtools::loaded_packages()
ls(MetaShARL)
ls(MetaShARK)
install.packages("attachment")
?attachment::att_amend_desc()
?devtools::install_github
identical(list.files, dir)
?dir
devtools::document()
utils::choose.dir
devtools::document()
devtools::document()
devtools::document()
((8873*6)*1500)
((8873*6)*1500)*12
(((8873*6)*1500)*12)/(10^9)
9973*6
8873*6
"followPath <- function(tree, path, sep = "/"){
# Validity checks
if(is.null(tree) || is.null(path))
stop("'tree' and 'path' args must be specified")
if(length(path) > 1)
stop("path shall be a vector of characters")
if(sep == "")
stop("path can't be parsed with @sep")
if(is.list(path))
path <- unlist(path)
# Processing
path <- unlist(strsplit(path,sep))
path = path[!path == "Root"]
while(length(path) != 0){
tree <- tree[[ path[1] ]]
path = path[-1]
}
return(tree)
}" == "followPath <- function(tree, path, sep = "/"){
# Validity checks
if(is.null(tree) || is.null(path))
stop("'tree' and 'path' args must be specified")
if(length(path) > 1)
stop("path shall be a vector of characters")
if(sep == "")
stop("path can't be parsed with @sep")
if(is.list(path))
path <- unlist(path)
# Processing
path <- unlist(strsplit(path,sep))
path = path[!path == "Root"]
while(length(path) != 0){
tree <- tree[[ path[1] ]]
path = path[-1]
}
return(tree)
}"
"followPath <- function(tree, path, sep = '/'){
# Validity checks
if(is.null(tree) || is.null(path))
stop(''tree' and 'path' args must be specified')
if(length(path) > 1)
stop('path shall be a vector of characters')
if(sep == '')
stop('path can't be parsed with @sep')
if(is.list(path))
path <- unlist(path)
# Processing
path <- unlist(strsplit(path,sep))
path = path[!path == 'Root']
while(length(path) != 0){
tree <- tree[[ path[1] ]]
path = path[-1]
}
return(tree)
}" == "followPath <- function(tree, path, sep = '/'){
# Validity checks
if(is.null(tree) || is.null(path))
stop(''tree' and 'path' args must be specified')
if(length(path) > 1)
stop('path shall be a vector of characters')
if(sep == '')
stop('path can't be parsed with @sep')
if(is.list(path))
path <- unlist(path)
# Processing
path <- unlist(strsplit(path,sep))
path = path[!path == 'Root']
while(length(path) != 0){
tree <- tree[[ path[1] ]]
path = path[-1]
}
return(tree)
}"
"followPath <- function(tree, path, sep = '/'){
if(is.null(tree) || is.null(path))
stop(''tree' and 'path' args must be specified')
if(length(path) > 1)
stop('path shall be a vector of characters')
if(sep == '')
stop('path can't be parsed with @sep')
if(is.list(path))
path <- unlist(path)
path <- unlist(strsplit(path,sep))
path = path[!path == 'Root']
while(length(path) != 0){
tree <- tree[[ path[1] ]]
path = path[-1]
}
return(tree)
}" == "followPath <- function(tree, path, sep = '/'){
if(is.null(tree) || is.null(path))
stop(''tree' and 'path' args must be specified')
if(length(path) > 1)
stop('path shall be a vector of characters')
if(sep == '')
stop('path can't be parsed with @sep')
if(is.list(path))
path <- unlist(path)
path <- unlist(strsplit(path,sep))
path = path[!path == 'Root']
while(length(path) != 0){
tree <- tree[[ path[1] ]]
path = path[-1]
}
return(tree)
}"
devtools::document()
devtools::load_all()
runMetashark()
devtools::loaded_packages()[1,]
devtools::loaded_packages()[,1]
install.packages("styler")
styler:::style_active_pkg()
devtools::load_all()
golem::document_and_reload()
grepl("0","tretot0")
!c(0,1)
as.numeric(!c(0,1))
as.logical(0)
1:10*1:10
(1:10)*(1:10)
combn(10,10)
combn(1:10,1:10)
combn(1:10,2)
sapply(1:10, function(i) i*(1:10))
fwrite(sapply(1:10, function(i) i*(1:10)),"~/Desktop/tmp.csv", sep = "\t")
golem::document_and_reload()
runMetashark()
runMetashark()
runMetashark(dev=TRUE)
rv$current_attribute
rv$attributes
printReactiveValues(rv$attributes)
rv$attributesTable
rv$files_names
rv$
files_names
rv$ #comment
files_names
rv$completed
golem::document_and_reload(); runMetashark(dev=TRUE)
golem::document_and_reload(); runMetashark(dev=TRUE)
savevar$emlal$DPfiles$dp_data_files
savevar$emlal$templateDP$decomp.csv
savevar$emlal$templateDP[[rv$current_file]]$attributeName
golem::document_and_reload(); runMetashark(dev=TRUE)
golem::document_and_reload(); runMetashark(dev=TRUE)
rv$attributesTable
isTruthy(rv$attributesTable)
rv$current_attribute
rv$attributesTable[rv$current_attribute,]
savevar$emlal$templateDP[[rv$current_file]]
rv$current_file
savevar$emlal$templateDP$decomp.csv
saveInput
rv$attributesTable[rv$current_attribute,]
printReactiveValues(
RV$attributes
)[names(RV$attributesTable)]
printReactiveValues(
rv$attributes
)[names(rv$attributesTable)]
rm(list=ls())
remove.packages("EMLassemblyline")
devtools::install_github("EDIorg/EMLassemblyline", ref="fix_41")
devtools::load_all()
golem::document_and_reload()
golem::document_and_reload(): runMetashark(dev=TRUE)
golem::document_and_reload(); runMetashark(dev=TRUE)
rv$current_file
savevar$emlal$templateDP[[rv$current_file]]
rv$attributesTable
golem::document_and_reload(); runMetashark(dev=TRUE)
golem::document_and_reload(); runMetashark(dev=TRUE)
?EMLassemblyline::template_arguments()
?EMLassemblyline::make_eml
golem::document_and_reload(); runMetashark(dev=TRUE)
golem::document_and_reload(); runMetashark(dev=TRUE)
isTruthy(rv$completed)
golem::document_and_reload(); runMetashark(dev=TRUE)
globals$EMLAL$PREVIOUS
globals$EMLAL$PREVIOUS <- c("template", nextStep)
globals$EMLAL$PREVIOUS
nextStep
golem::document_and_reload(); runMetashark(dev=TRUE)
golem::document_and_reload(); runMetashark(dev=TRUE)
"custom" %in% savevar$emlal$templateDP[[fn]][, "unit"]
nextStep
nextStep
golem::document_and_reload(); runMetashark(dev=TRUE)
nextStep
sapply(nextStep, print)
lapply(nextStep, print)
apply(nextStep, 1, print)
apply(nextStep, 2, min)
golem::document_and_reload(); runMetashark(dev=TRUE)
nextStep
golem::document_and_reload(); runMetashark(dev=TRUE)
nextStep
rv$CU_Table
isTruthy(rv$CU_Table)
isTruthy(unlist(rv$CU_Table))
